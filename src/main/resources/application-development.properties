######################################################
# Server Configuration
######################################################
server.port=8000
######################################################
# Datasource Config
######################################################
spring.jpa.database=H2
spring.jpa.show-sql=true
# We will use in-memory DB for running tests
# 1. The schema name TCSPIKE is case-sensitive in H2 url and
# spring.datasource.url = jdbc:h2:mem:tcspikedb;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS TCSPIKE;
# 2. also use @TestPropertySource(properties = {
#        // use memory instead of file.
#        "spring.datasource.url = jdbc:h2:mem:tcspikedb;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS TCSPIKE;"
#})
# in the Integration tests.
# By design, the in-memory database is volatile, and it is ok for running tests
# whereas for running application in development mode the data will be lost when we
# restart the application.  So, we need to run H2 like a regular database, where data
# is not lost across restarts.  So, in order to run it like regular database, we need
# to change that behavior by using file-based storage.  Generally, to debug a test the
# file-based storage can be helpful.
#
# To do this we need to use (schema name TCSPIKE is case-sensitive in H2):
# spring.datasource.url = jdbc:h2:file:./database/tcspikedb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS TCSPIKE;
# General URL format for H2 is:
# jdbc:h2:{ {.|mem:}[name] | [file:]fileName | {tcp|ssl}:[//]server[:port][,server2[:port]]/name }[;key=value...]
# In memory URL
#spring.datasource.url = jdbc:h2:mem:tcspikedb;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS TCSPIKE;
# File URL
spring.datasource.url=jdbc:h2:file:./database/tcspikedb;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS PATCSPIKEYMENTS;
# File URL, using IFEXISTS=TRUE will not create it
#spring.datasource.url = jdbc:h2:file:./database/tcspikedb;DB_CLOSE_ON_EXIT=FALSE;IFEXISTS=TRUE;DB_CLOSE_DELAY=-1;
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
#spring.datasource.hikari.maximumPoolSize = 8
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.default_schema=tcspike
#spring.jpa.open-in-view = false
######################################################
# Enable H2 Console Access
######################################################
# H2 database has an embedded GUI console for browsing the contents of a database
# and running SQL queries. By default, the H2 console is not enabled in Spring.
# To enable it, we need to add the following property to application.properties:
spring.h2.console.enabled=true
# The H2 console can be accessed on port 9000
# http://localhost:9000/h2-console
# Use the above url in the connection string
spring.h2.console.path=/h2-console
# Hibernate ddl auto (create, create-drop, validate, update)
# Interpretation:
# validate: validate the schema, makes no changes to the database.
# update: update the schema.
# create: creates the schema, destroying previous data.
# create-drop: drop the schema when the SessionFactory is closed explicitly, typically when the application is stopped.
# none: does nothing with the schema, makes no changes to the database
#
# NOTE: if you wish to use Hibernate to create schema in test, use create-drop
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.format-sql=true
spring.jpa.hibernate.use-sql-comments=true


